
Reduce a function with mutiple equations to a function with only an equation:

If we have a function f with mutiple equations:
--
f args1 = body1                           
...
f argsN = bodyN
---

first, we calculate the number of arguments:

M := max(length(args1), ..., length(argsN))

and we produce the following code:
 
f = \ x1 ... xM ->
          ((\ args1 -> body1) x1 ... xM)
        | ((\ args2 -> body2) x1 ... xM)
        | ...
        | ((\ argsN -> bodyN) x1 ... xM)

--------------------------- Desugar mutual recursive let algorithm ---------------------------

1) Let with non recursive variable.

   let x = A in B
   ===>
   (\x.B)A

      
2) Lambda where his param are patterns.

   -- with only a pattern:
   \ p . A
   ===>
   \ x . fresh y1...ym. (x ~ p), A


   -- with some patterns:
   \ p1 ... pn . A
   ===>
   \ x1 ... xn . fresh y1...ym. (x1 ~ p1) & ... & (xn ~ pn) & A
   
   x1,...,xn are fresh variables
   y1,...,ym are the free variables from p1...pn
   
3) Let of non recursive function.

   let f p1 ... pn = A in B
   ===>
   let f = (\p1...pn.A) in B (reduces to case 1)

 4) Let with some mutually recursive functions

    let f1 = A1
        ...
        fn = An
    in B   
    ===>
    let T = fix(T. {Tuple} A1* ... An*) in
      B*

    where X*
    is the result of
    replace in X whole ocurrences of f_i by pi_i(T).
    Also:
      pi_i(T) = fresh x1, ..., xn in 
                  (T == {Tuple} x1 ... xn) &
                  xi

--------------------------- Desugar Case of ---------------------------

case e of
  p1 -> b1
  ...
  pN -> bN

Should be transformed to:

(\ x ->   fresh Y1 in ((x == p1) & b1)
        | ...
        | fresh Yn in ((x == pN) & bN))
    e

Where Y_i are the free variables of p_i
